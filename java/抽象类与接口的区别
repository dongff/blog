一、抽象类

（一）抽象类的概念

在继承的层次结构中，每个新的子类都使类变得更加明确和具体。如果从一个子类向父类追溯，类就会变得更加通用、更加不明确。类的设计应该确保父类包含它的子类的共同特征。有时候，一个父类被设计得非常抽象，以至于它都没有任何具体的实例。这样的类被成为抽象类。

（二）抽象类的特点

1. 抽象类不能被实例化，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。

2. 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。

3. 抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。

4. 构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。

5. 抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。

二、接口

（一）接口的概念

在Java中，接口是一系列方法的声明，是一些方法特征的集合。接口并不是类，但可以被看作是一种特殊的类，编写接口的方式与类高度相似。

（二）接口的特点

1. 接口中的每一个方法都是抽象方法，并且每一个方法都会被隐式地指定为public abstract方法。

2. 接口中的变量会被隐式地指定为public static final变量。

3. 接口中的方法不能在接口中实现，只能由实现接口的类来实现接口中的方法。

4. 接口不能被实例化，而且在接口中所列的所有方法必须在别处被重写。

三、抽象类和接口的异同点

（一）相同点

1. 抽象类和接口都不能被实例化。

2. 继承抽象类和实现接口都要对其中的抽象方法进行全部实现。

（二）不同点

1. 接口里只能包含抽象方法，静态方法和默认方法，不能为普通方法提供方法的实现，而抽象类完全可以包含普通方法，接口中的普通方法默认为抽象方法。

2. 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是

public static final类型且必须赋值。

3. 接口不能包含构造器，而抽象类可以包含构造器，抽象类中的构造器并不是用于创造对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。

4. 接口里不能包含初始化块，而抽象类里可以包含初始化块。

5. 一个类只能继承一个抽象类，而一个类却可以实现多个接口。
